// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBalance = `-- name: AddBalance :one
UPDATE users
SET
    balance = balance + $1
WHERE
    username = $2
RETURNING
    balance
`

type AddBalanceParams struct {
	Balance  pgtype.Numeric `db:"balance" json:"balance"`
	Username string         `db:"username" json:"username"`
}

func (q *Queries) AddBalance(ctx context.Context, arg AddBalanceParams) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, addBalance, arg.Balance, arg.Username)
	var balance pgtype.Numeric
	err := row.Scan(&balance)
	return balance, err
}

const addPhoneNumber = `-- name: AddPhoneNumber :exec
INSERT INTO
    phone_numbers (user_id, phone_number)
VALUES ($1, $2)
`

type AddPhoneNumberParams struct {
	UserID      int32  `db:"user_id" json:"user_id"`
	PhoneNumber string `db:"phone_number" json:"phone_number"`
}

func (q *Queries) AddPhoneNumber(ctx context.Context, arg AddPhoneNumberParams) error {
	_, err := q.db.Exec(ctx, addPhoneNumber, arg.UserID, arg.PhoneNumber)
	return err
}

const addPhoneNumberByUsername = `-- name: AddPhoneNumberByUsername :exec
INSERT INTO
    phone_numbers (user_id, phone_number)
VALUES (
        (
            SELECT id
            FROM users
            WHERE
                username = $1
        ),
        $2
    )
`

type AddPhoneNumberByUsernameParams struct {
	Username    string `db:"username" json:"username"`
	PhoneNumber string `db:"phone_number" json:"phone_number"`
}

func (q *Queries) AddPhoneNumberByUsername(ctx context.Context, arg AddPhoneNumberByUsernameParams) error {
	_, err := q.db.Exec(ctx, addPhoneNumberByUsername, arg.Username, arg.PhoneNumber)
	return err
}

const addSms = `-- name: AddSms :exec
INSERT INTO sms (user_id,phone_number_id,to_phone_number,status,message) VALUES ($1, $2, $3, $4, $5)
`

type AddSmsParams struct {
	UserID        int32  `db:"user_id" json:"user_id"`
	PhoneNumberID int32  `db:"phone_number_id" json:"phone_number_id"`
	ToPhoneNumber string `db:"to_phone_number" json:"to_phone_number"`
	Status        string `db:"status" json:"status"`
	Message       string `db:"message" json:"message"`
}

func (q *Queries) AddSms(ctx context.Context, arg AddSmsParams) error {
	_, err := q.db.Exec(ctx, addSms,
		arg.UserID,
		arg.PhoneNumberID,
		arg.ToPhoneNumber,
		arg.Status,
		arg.Message,
	)
	return err
}

const addUser = `-- name: AddUser :exec
INSERT INTO users (username, balance) VALUES ($1, $2)
`

type AddUserParams struct {
	Username string         `db:"username" json:"username"`
	Balance  pgtype.Numeric `db:"balance" json:"balance"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser, arg.Username, arg.Balance)
	return err
}

const deletePhoneNumber = `-- name: DeletePhoneNumber :one
DELETE FROM phone_numbers WHERE id = $1 RETURNING id
`

func (q *Queries) DeletePhoneNumber(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deletePhoneNumber, id)
	err := row.Scan(&id)
	return id, err
}

const getPhoneNumber = `-- name: GetPhoneNumber :one
SELECT id, user_id, phone_number FROM phone_numbers WHERE id = $1
`

func (q *Queries) GetPhoneNumber(ctx context.Context, id int32) (PhoneNumber, error) {
	row := q.db.QueryRow(ctx, getPhoneNumber, id)
	var i PhoneNumber
	err := row.Scan(&i.ID, &i.UserID, &i.PhoneNumber)
	return i, err
}

const getPhoneNumbersByUsername = `-- name: GetPhoneNumbersByUsername :many
SELECT pn.id, pn.user_id, pn.phone_number
FROM phone_numbers pn
    JOIN users u ON pn.user_id = u.id
WHERE
    u.username = $1
`

func (q *Queries) GetPhoneNumbersByUsername(ctx context.Context, username string) ([]PhoneNumber, error) {
	rows, err := q.db.Query(ctx, getPhoneNumbersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhoneNumber
	for rows.Next() {
		var i PhoneNumber
		if err := rows.Scan(&i.ID, &i.UserID, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserId = `-- name: GetUserId :one
SELECT id FROM users u WHERE u.username = $1
`

func (q *Queries) GetUserId(ctx context.Context, username string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserId, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}
